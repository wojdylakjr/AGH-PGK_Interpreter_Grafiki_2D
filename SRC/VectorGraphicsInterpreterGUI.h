#ifndef __VectorGraphicsInterpreterGUI__
#define __VectorGraphicsInterpreterGUI__

/**
@file
Subclass of GUI, which is generated by wxFormBuilder.
*/

#include "GUI.h"

//// end generated include

#include <wx/dc.h>
#include <wx/dcclient.h>
#include <wx/dcbuffer.h>
#include <vector>

#include "Panel.h"
#include "Line.h"

/** Implementing GUI */
class VectorGraphicsInterpreterGUI : public GUI
{
	protected:
		// Handlers for GUI events.
		void workspaceOnMotion( wxMouseEvent& event );
		void workspaceOnUpdateUI( wxUpdateUIEvent& event );
		void consoleOnTextEnter( wxCommandEvent& event );
	public:
		/** Constructor */
		VectorGraphicsInterpreterGUI( wxWindow* parent );
	//// end generated class members



private:
	std::vector <Shape*> m_shapes;
	Panel m_drawPanel;


	/** vector of existing commands */
	std::vector<std::string> m_commands = { "range", "background", "line", "rectangle",
										 "circle", "ellipse", "arc", "fill", "delete",
										 "move", "rotate", "show", "clear", "write",
										 "read", "save" };

	/** current x position on workspace */
	double m_currentX = 0.0;
	/** current y position on workspace */
	double m_currentY = 0.0;
	/** bitmap used in order to save to file */
	wxBitmap m_picture;

	/** console commands */
	void commandRange(std::string instructions);
	void commandBackground(std::string instructions);
	void commandLine(std::string instructions);
	void commandRectangle(std::string instructions);
	void commandCircle(std::string instructions);
	void commandEllipse(std::string instructions);
	void commandArc(std::string instructions);
	void commandFill(std::string instructions);
	void commandDelete(std::string instructions);
	void commandMove(std::string instructions);
	void commandRotate(std::string instructions);
	void commandShow(std::string instructions);
	void commandClear(std::string instructions);
	void commandWrite(std::string instructions);
	void commandRead(std::string instructions);
	void commandSave(std::string instructions);

public:
	/**
	 * method painting workspace
	 */
	void Repaint();
























};

#endif // __VectorGraphicsInterpreterGUI__
